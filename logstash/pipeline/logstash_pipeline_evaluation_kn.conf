input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/jdbc_drivers/postgresql.jar/postgresql-42.6.0.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://10.10.10.154:5432/sci_erp"
    jdbc_user => "erp_db_user"
    jdbc_password => "Erp@scI2021"
    schedule => "10 7-17 * * *"
    statement => "SELECT sme.id AS id, sme.name AS name, cl.id AS booking_id, cl.phone as phone, sme.evaluation_start_date::date AS date, sme.write_date, service_data.service_ids::text AS service_ids, service_data.service_names::text AS service_names, CONCAT_WS(', ', rp.street, rp.street2, rp.city) as address, COALESCE(rc.phone, 'unknown_phone') as phone_company FROM sh_medical_evaluation sme LEFT JOIN sh_medical_health_center smhc ON smhc.id = sme.institution LEFT JOIN res_company rc on rc.id = sme.company_id LEFT JOIN res_partner rp on rp.id = rc.partner_id LEFT JOIN res_brand rb ON rb.id = smhc.brand LEFT JOIN crm_lead cl ON cl.id = sme.booking_id LEFT JOIN (SELECT sesr.evaluation_id, array_to_json(array_agg(smhcs.id ORDER BY smhcs.id)) AS service_ids, array_to_json(array_agg(pt.name ORDER BY smhcs.id)) AS service_names FROM sh_evaluation_service_rel sesr LEFT JOIN sh_medical_health_center_service smhcs ON sesr.service_id = smhcs.id LEFT JOIN product_product pp ON pp.id = smhcs.product_id LEFT JOIN product_template pt ON pt.id = pp.product_tmpl_id GROUP BY sesr.evaluation_id) AS service_data ON service_data.evaluation_id = sme.id WHERE rb.code = 'KN' and sme.write_date > :sql_last_value ORDER BY sme.create_date DESC"
    use_column_value => true
    tracking_column => "write_date"
    tracking_column_type => "timestamp"
    last_run_metadata_path => "/usr/share/logstash/metadata/.logstash_pipeline_evaluation_kn_last_run"
  }

  tcp {
    port => 50005
    codec => json_lines { delimiter => "\n" charset => "UTF-8" }
  }
}

filter {
  mutate { remove_field => ["@version"] }

  # Xử lý service_ids
  mutate {
    gsub => ["service_ids", "[\[\]\"]", ""] # Xóa [ ] "
    split => ["service_ids", ","] # Tách thành array
    }

  # Xử lý định dạng ngày cho field 'date'
  date {
    match => ["date", "yyyy-MM-dd", "ISO8601"]
    target => "date"
  }

  # Use ruby filter to ensure service_ids is array of integers
  ruby {
    code => "
      ['service_ids', 'service_names'].each do |field|
        value = event.get(field)
        next unless value.is_a?(Array)

        converted = field == 'service_ids' ? value.map(&:to_i) : value.map(&:to_s)
        event.set(field, converted)
      end
    "
  }
}


output {
  stdout { codec => rubydebug { metadata => true } }
  elasticsearch {
    hosts => "elasticsearch:9200"
    user => "logstash_internal"
    password => "${LOGSTASH_INTERNAL_PASSWORD}"
    index => "evaluation_kn"
    document_id => "%{id}"
  }
}
